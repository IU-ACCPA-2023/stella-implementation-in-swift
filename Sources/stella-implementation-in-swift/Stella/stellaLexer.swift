// Generated from stellaLexer.g4 by ANTLR 4.12.0
import Antlr4

open class stellaLexer: Lexer {

	internal static var _decisionToDFA: [DFA] = {
          var decisionToDFA = [DFA]()
          let length = stellaLexer._ATN.getNumberOfDecisions()
          for i in 0..<length {
          	    decisionToDFA.append(DFA(stellaLexer._ATN.getDecisionState(i)!, i))
          }
           return decisionToDFA
     }()

	internal static let _sharedContextCache = PredictionContextCache()

	public
	static let Surrogate_id_SYMB_0=1, Surrogate_id_SYMB_1=2, Surrogate_id_SYMB_2=3, 
            Surrogate_id_SYMB_3=4, Surrogate_id_SYMB_4=5, Surrogate_id_SYMB_5=6, 
            Surrogate_id_SYMB_6=7, Surrogate_id_SYMB_7=8, Surrogate_id_SYMB_8=9, 
            Surrogate_id_SYMB_9=10, Surrogate_id_SYMB_10=11, Surrogate_id_SYMB_11=12, 
            Surrogate_id_SYMB_12=13, Surrogate_id_SYMB_13=14, Surrogate_id_SYMB_14=15, 
            Surrogate_id_SYMB_15=16, Surrogate_id_SYMB_16=17, Surrogate_id_SYMB_17=18, 
            Surrogate_id_SYMB_18=19, Surrogate_id_SYMB_19=20, Surrogate_id_SYMB_20=21, 
            Surrogate_id_SYMB_21=22, Surrogate_id_SYMB_22=23, Surrogate_id_SYMB_23=24, 
            Surrogate_id_SYMB_24=25, Surrogate_id_SYMB_25=26, Surrogate_id_SYMB_26=27, 
            Surrogate_id_SYMB_27=28, Surrogate_id_SYMB_28=29, Surrogate_id_SYMB_29=30, 
            Surrogate_id_SYMB_30=31, Surrogate_id_SYMB_31=32, Surrogate_id_SYMB_32=33, 
            Surrogate_id_SYMB_33=34, Surrogate_id_SYMB_34=35, Surrogate_id_SYMB_35=36, 
            Surrogate_id_SYMB_36=37, Surrogate_id_SYMB_37=38, Surrogate_id_SYMB_38=39, 
            Surrogate_id_SYMB_39=40, Surrogate_id_SYMB_40=41, Surrogate_id_SYMB_41=42, 
            Surrogate_id_SYMB_42=43, Surrogate_id_SYMB_43=44, Surrogate_id_SYMB_44=45, 
            Surrogate_id_SYMB_45=46, Surrogate_id_SYMB_46=47, Surrogate_id_SYMB_47=48, 
            Surrogate_id_SYMB_48=49, Surrogate_id_SYMB_49=50, Surrogate_id_SYMB_50=51, 
            Surrogate_id_SYMB_51=52, Surrogate_id_SYMB_52=53, Surrogate_id_SYMB_53=54, 
            Surrogate_id_SYMB_54=55, Surrogate_id_SYMB_55=56, Surrogate_id_SYMB_56=57, 
            Surrogate_id_SYMB_57=58, Surrogate_id_SYMB_58=59, Surrogate_id_SYMB_59=60, 
            Surrogate_id_SYMB_60=61, Surrogate_id_SYMB_61=62, Surrogate_id_SYMB_62=63, 
            Surrogate_id_SYMB_63=64, Surrogate_id_SYMB_64=65, Surrogate_id_SYMB_65=66, 
            EXCEPTION=67, VARIANT=68, CAST=69, ASSIGN=70, REF_TYPE=71, REFERENCE=72, 
            PANIC=73, THROW=74, TRY=75, CATCH=76, TOP_TYPE=77, BOTTOM_TYPE=78, 
            COMMENT_antlr_builtin=79, MULTICOMMENT_antlr_builtin=80, StellaIdent=81, 
            ExtensionName=82, MemoryAddress=83, INTEGER=84, WS=85, ErrorToken=86

	public
	static let channelNames: [String] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	]

	public
	static let modeNames: [String] = [
		"DEFAULT_MODE"
	]

	public
	static let ruleNames: [String] = [
		"LETTER", "CAPITAL", "SMALL", "DIGIT", "Surrogate_id_SYMB_0", "Surrogate_id_SYMB_1", 
		"Surrogate_id_SYMB_2", "Surrogate_id_SYMB_3", "Surrogate_id_SYMB_4", "Surrogate_id_SYMB_5", 
		"Surrogate_id_SYMB_6", "Surrogate_id_SYMB_7", "Surrogate_id_SYMB_8", "Surrogate_id_SYMB_9", 
		"Surrogate_id_SYMB_10", "Surrogate_id_SYMB_11", "Surrogate_id_SYMB_12", 
		"Surrogate_id_SYMB_13", "Surrogate_id_SYMB_14", "Surrogate_id_SYMB_15", 
		"Surrogate_id_SYMB_16", "Surrogate_id_SYMB_17", "Surrogate_id_SYMB_18", 
		"Surrogate_id_SYMB_19", "Surrogate_id_SYMB_20", "Surrogate_id_SYMB_21", 
		"Surrogate_id_SYMB_22", "Surrogate_id_SYMB_23", "Surrogate_id_SYMB_24", 
		"Surrogate_id_SYMB_25", "Surrogate_id_SYMB_26", "Surrogate_id_SYMB_27", 
		"Surrogate_id_SYMB_28", "Surrogate_id_SYMB_29", "Surrogate_id_SYMB_30", 
		"Surrogate_id_SYMB_31", "Surrogate_id_SYMB_32", "Surrogate_id_SYMB_33", 
		"Surrogate_id_SYMB_34", "Surrogate_id_SYMB_35", "Surrogate_id_SYMB_36", 
		"Surrogate_id_SYMB_37", "Surrogate_id_SYMB_38", "Surrogate_id_SYMB_39", 
		"Surrogate_id_SYMB_40", "Surrogate_id_SYMB_41", "Surrogate_id_SYMB_42", 
		"Surrogate_id_SYMB_43", "Surrogate_id_SYMB_44", "Surrogate_id_SYMB_45", 
		"Surrogate_id_SYMB_46", "Surrogate_id_SYMB_47", "Surrogate_id_SYMB_48", 
		"Surrogate_id_SYMB_49", "Surrogate_id_SYMB_50", "Surrogate_id_SYMB_51", 
		"Surrogate_id_SYMB_52", "Surrogate_id_SYMB_53", "Surrogate_id_SYMB_54", 
		"Surrogate_id_SYMB_55", "Surrogate_id_SYMB_56", "Surrogate_id_SYMB_57", 
		"Surrogate_id_SYMB_58", "Surrogate_id_SYMB_59", "Surrogate_id_SYMB_60", 
		"Surrogate_id_SYMB_61", "Surrogate_id_SYMB_62", "Surrogate_id_SYMB_63", 
		"Surrogate_id_SYMB_64", "Surrogate_id_SYMB_65", "EXCEPTION", "VARIANT", 
		"CAST", "ASSIGN", "REF_TYPE", "REFERENCE", "PANIC", "THROW", "TRY", "CATCH", 
		"TOP_TYPE", "BOTTOM_TYPE", "COMMENT_antlr_builtin", "MULTICOMMENT_antlr_builtin", 
		"StellaIdent", "ExtensionName", "MemoryAddress", "INTEGER", "WS", "Escapable", 
		"ErrorToken"
	]

	private static let _LITERAL_NAMES: [String?] = [
		nil, "','", "';'", "'('", "')'", "'{'", "'}'", "'='", "':'", "'->'", "'=>'", 
		"'|'", "'<|'", "'|>'", "'['", "']'", "'<'", "'<='", "'>'", "'>='", "'=='", 
		"'!='", "'+'", "'-'", "'*'", "'/'", "'.'", "'List::head'", "'List::isempty'", 
		"'List::tail'", "'Nat::pred'", "'Nat::iszero'", "'Nat::rec'", "'Bool'", 
		"'Nat'", "'Unit'", "'and'", "'as'", "'cons'", "'core'", "'else'", "'extend'", 
		"'false'", "'fix'", "'fn'", "'fold'", "'if'", "'in'", "'inl'", "'inline'", 
		"'inr'", "'language'", "'let'", "'letrec'", "'match'", "'not'", "'or'", 
		"'return'", "'succ'", "'then'", "'throws'", "'true'", "'type'", "'unfold'", 
		"'unit'", "'with'", "'\\u{00B5}'", "'exception'", "'variant'", "'cast'", 
		"':='", "'&'", "'new'", "'panic!'", "'throw'", "'try'", "'catch'", "'Top'", 
		"'Bot'"
	]
	private static let _SYMBOLIC_NAMES: [String?] = [
		nil, "Surrogate_id_SYMB_0", "Surrogate_id_SYMB_1", "Surrogate_id_SYMB_2", 
		"Surrogate_id_SYMB_3", "Surrogate_id_SYMB_4", "Surrogate_id_SYMB_5", "Surrogate_id_SYMB_6", 
		"Surrogate_id_SYMB_7", "Surrogate_id_SYMB_8", "Surrogate_id_SYMB_9", "Surrogate_id_SYMB_10", 
		"Surrogate_id_SYMB_11", "Surrogate_id_SYMB_12", "Surrogate_id_SYMB_13", 
		"Surrogate_id_SYMB_14", "Surrogate_id_SYMB_15", "Surrogate_id_SYMB_16", 
		"Surrogate_id_SYMB_17", "Surrogate_id_SYMB_18", "Surrogate_id_SYMB_19", 
		"Surrogate_id_SYMB_20", "Surrogate_id_SYMB_21", "Surrogate_id_SYMB_22", 
		"Surrogate_id_SYMB_23", "Surrogate_id_SYMB_24", "Surrogate_id_SYMB_25", 
		"Surrogate_id_SYMB_26", "Surrogate_id_SYMB_27", "Surrogate_id_SYMB_28", 
		"Surrogate_id_SYMB_29", "Surrogate_id_SYMB_30", "Surrogate_id_SYMB_31", 
		"Surrogate_id_SYMB_32", "Surrogate_id_SYMB_33", "Surrogate_id_SYMB_34", 
		"Surrogate_id_SYMB_35", "Surrogate_id_SYMB_36", "Surrogate_id_SYMB_37", 
		"Surrogate_id_SYMB_38", "Surrogate_id_SYMB_39", "Surrogate_id_SYMB_40", 
		"Surrogate_id_SYMB_41", "Surrogate_id_SYMB_42", "Surrogate_id_SYMB_43", 
		"Surrogate_id_SYMB_44", "Surrogate_id_SYMB_45", "Surrogate_id_SYMB_46", 
		"Surrogate_id_SYMB_47", "Surrogate_id_SYMB_48", "Surrogate_id_SYMB_49", 
		"Surrogate_id_SYMB_50", "Surrogate_id_SYMB_51", "Surrogate_id_SYMB_52", 
		"Surrogate_id_SYMB_53", "Surrogate_id_SYMB_54", "Surrogate_id_SYMB_55", 
		"Surrogate_id_SYMB_56", "Surrogate_id_SYMB_57", "Surrogate_id_SYMB_58", 
		"Surrogate_id_SYMB_59", "Surrogate_id_SYMB_60", "Surrogate_id_SYMB_61", 
		"Surrogate_id_SYMB_62", "Surrogate_id_SYMB_63", "Surrogate_id_SYMB_64", 
		"Surrogate_id_SYMB_65", "EXCEPTION", "VARIANT", "CAST", "ASSIGN", "REF_TYPE", 
		"REFERENCE", "PANIC", "THROW", "TRY", "CATCH", "TOP_TYPE", "BOTTOM_TYPE", 
		"COMMENT_antlr_builtin", "MULTICOMMENT_antlr_builtin", "StellaIdent", 
		"ExtensionName", "MemoryAddress", "INTEGER", "WS", "ErrorToken"
	]
	public
	static let VOCABULARY = Vocabulary(_LITERAL_NAMES, _SYMBOLIC_NAMES)


	override open
	func getVocabulary() -> Vocabulary {
		return stellaLexer.VOCABULARY
	}

	public
	required init(_ input: CharStream) {
	    RuntimeMetaData.checkVersion("4.12.0", RuntimeMetaData.VERSION)
		super.init(input)
		_interp = LexerATNSimulator(self, stellaLexer._ATN, stellaLexer._decisionToDFA, stellaLexer._sharedContextCache)
	}

	override open
	func getGrammarFileName() -> String { return "stellaLexer.g4" }

	override open
	func getRuleNames() -> [String] { return stellaLexer.ruleNames }

	override open
	func getSerializedATN() -> [Int] { return stellaLexer._serializedATN }

	override open
	func getChannelNames() -> [String] { return stellaLexer.channelNames }

	override open
	func getModeNames() -> [String] { return stellaLexer.modeNames }

	override open
	func getATN() -> ATN { return stellaLexer._ATN }

	static let _serializedATN:[Int] = [
		4,0,86,635,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
		7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
		7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,1,
		0,3,0,186,8,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
		1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,
		1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
		1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
		1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
		1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,
		1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,
		1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,
		1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,
		1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,
		1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,
		1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,
		1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,
		1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,
		1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,68,
		1,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,
		1,72,1,73,1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,
		1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,
		1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,
		1,82,1,82,1,82,5,82,556,8,82,10,82,12,82,559,9,82,1,82,3,82,562,8,82,1,
		82,1,82,3,82,566,8,82,1,82,1,82,1,83,1,83,1,83,1,83,5,83,574,8,83,10,83,
		12,83,577,9,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,3,84,586,8,84,1,84,1,
		84,1,84,3,84,591,8,84,5,84,593,8,84,10,84,12,84,596,9,84,1,85,1,85,1,85,
		1,85,3,85,602,8,85,4,85,604,8,85,11,85,12,85,605,1,86,1,86,1,86,1,86,1,
		86,1,86,4,86,614,8,86,11,86,12,86,615,1,86,1,86,1,87,4,87,621,8,87,11,
		87,12,87,622,1,88,4,88,626,8,88,11,88,12,88,627,1,88,1,88,1,89,1,89,1,
		90,1,90,1,575,0,91,1,0,3,0,5,0,7,0,9,1,11,2,13,3,15,4,17,5,19,6,21,7,23,
		8,25,9,27,10,29,11,31,12,33,13,35,14,37,15,39,16,41,17,43,18,45,19,47,
		20,49,21,51,22,53,23,55,24,57,25,59,26,61,27,63,28,65,29,67,30,69,31,71,
		32,73,33,75,34,77,35,79,36,81,37,83,38,85,39,87,40,89,41,91,42,93,43,95,
		44,97,45,99,46,101,47,103,48,105,49,107,50,109,51,111,52,113,53,115,54,
		117,55,119,56,121,57,123,58,125,59,127,60,129,61,131,62,133,63,135,64,
		137,65,139,66,141,67,143,68,145,69,147,70,149,71,151,72,153,73,155,74,
		157,75,159,76,161,77,163,78,165,79,167,80,169,81,171,82,173,83,175,84,
		177,85,179,0,181,86,1,0,9,3,0,65,90,192,214,216,222,3,0,97,122,223,246,
		248,255,1,0,48,57,2,0,10,10,13,13,5,0,33,33,45,45,58,58,63,63,95,95,2,
		0,45,45,95,95,1,0,97,102,3,0,9,10,12,13,32,32,6,0,34,34,92,92,102,102,
		110,110,114,114,116,116,645,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
		103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
		113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
		123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,
		133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,
		143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,
		153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,
		163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,
		173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,181,1,0,0,0,1,185,1,0,0,0,3,
		187,1,0,0,0,5,189,1,0,0,0,7,191,1,0,0,0,9,193,1,0,0,0,11,195,1,0,0,0,13,
		197,1,0,0,0,15,199,1,0,0,0,17,201,1,0,0,0,19,203,1,0,0,0,21,205,1,0,0,
		0,23,207,1,0,0,0,25,209,1,0,0,0,27,212,1,0,0,0,29,215,1,0,0,0,31,217,1,
		0,0,0,33,220,1,0,0,0,35,223,1,0,0,0,37,225,1,0,0,0,39,227,1,0,0,0,41,229,
		1,0,0,0,43,232,1,0,0,0,45,234,1,0,0,0,47,237,1,0,0,0,49,240,1,0,0,0,51,
		243,1,0,0,0,53,245,1,0,0,0,55,247,1,0,0,0,57,249,1,0,0,0,59,251,1,0,0,
		0,61,253,1,0,0,0,63,264,1,0,0,0,65,278,1,0,0,0,67,289,1,0,0,0,69,299,1,
		0,0,0,71,311,1,0,0,0,73,320,1,0,0,0,75,325,1,0,0,0,77,329,1,0,0,0,79,334,
		1,0,0,0,81,338,1,0,0,0,83,341,1,0,0,0,85,346,1,0,0,0,87,351,1,0,0,0,89,
		356,1,0,0,0,91,363,1,0,0,0,93,369,1,0,0,0,95,373,1,0,0,0,97,376,1,0,0,
		0,99,381,1,0,0,0,101,384,1,0,0,0,103,387,1,0,0,0,105,391,1,0,0,0,107,398,
		1,0,0,0,109,402,1,0,0,0,111,411,1,0,0,0,113,415,1,0,0,0,115,422,1,0,0,
		0,117,428,1,0,0,0,119,432,1,0,0,0,121,435,1,0,0,0,123,442,1,0,0,0,125,
		447,1,0,0,0,127,452,1,0,0,0,129,459,1,0,0,0,131,464,1,0,0,0,133,469,1,
		0,0,0,135,476,1,0,0,0,137,481,1,0,0,0,139,486,1,0,0,0,141,488,1,0,0,0,
		143,498,1,0,0,0,145,506,1,0,0,0,147,511,1,0,0,0,149,514,1,0,0,0,151,516,
		1,0,0,0,153,520,1,0,0,0,155,527,1,0,0,0,157,533,1,0,0,0,159,537,1,0,0,
		0,161,543,1,0,0,0,163,547,1,0,0,0,165,551,1,0,0,0,167,569,1,0,0,0,169,
		585,1,0,0,0,171,597,1,0,0,0,173,607,1,0,0,0,175,620,1,0,0,0,177,625,1,
		0,0,0,179,631,1,0,0,0,181,633,1,0,0,0,183,186,3,3,1,0,184,186,3,5,2,0,
		185,183,1,0,0,0,185,184,1,0,0,0,186,2,1,0,0,0,187,188,7,0,0,0,188,4,1,
		0,0,0,189,190,7,1,0,0,190,6,1,0,0,0,191,192,7,2,0,0,192,8,1,0,0,0,193,
		194,5,44,0,0,194,10,1,0,0,0,195,196,5,59,0,0,196,12,1,0,0,0,197,198,5,
		40,0,0,198,14,1,0,0,0,199,200,5,41,0,0,200,16,1,0,0,0,201,202,5,123,0,
		0,202,18,1,0,0,0,203,204,5,125,0,0,204,20,1,0,0,0,205,206,5,61,0,0,206,
		22,1,0,0,0,207,208,5,58,0,0,208,24,1,0,0,0,209,210,5,45,0,0,210,211,5,
		62,0,0,211,26,1,0,0,0,212,213,5,61,0,0,213,214,5,62,0,0,214,28,1,0,0,0,
		215,216,5,124,0,0,216,30,1,0,0,0,217,218,5,60,0,0,218,219,5,124,0,0,219,
		32,1,0,0,0,220,221,5,124,0,0,221,222,5,62,0,0,222,34,1,0,0,0,223,224,5,
		91,0,0,224,36,1,0,0,0,225,226,5,93,0,0,226,38,1,0,0,0,227,228,5,60,0,0,
		228,40,1,0,0,0,229,230,5,60,0,0,230,231,5,61,0,0,231,42,1,0,0,0,232,233,
		5,62,0,0,233,44,1,0,0,0,234,235,5,62,0,0,235,236,5,61,0,0,236,46,1,0,0,
		0,237,238,5,61,0,0,238,239,5,61,0,0,239,48,1,0,0,0,240,241,5,33,0,0,241,
		242,5,61,0,0,242,50,1,0,0,0,243,244,5,43,0,0,244,52,1,0,0,0,245,246,5,
		45,0,0,246,54,1,0,0,0,247,248,5,42,0,0,248,56,1,0,0,0,249,250,5,47,0,0,
		250,58,1,0,0,0,251,252,5,46,0,0,252,60,1,0,0,0,253,254,5,76,0,0,254,255,
		5,105,0,0,255,256,5,115,0,0,256,257,5,116,0,0,257,258,5,58,0,0,258,259,
		5,58,0,0,259,260,5,104,0,0,260,261,5,101,0,0,261,262,5,97,0,0,262,263,
		5,100,0,0,263,62,1,0,0,0,264,265,5,76,0,0,265,266,5,105,0,0,266,267,5,
		115,0,0,267,268,5,116,0,0,268,269,5,58,0,0,269,270,5,58,0,0,270,271,5,
		105,0,0,271,272,5,115,0,0,272,273,5,101,0,0,273,274,5,109,0,0,274,275,
		5,112,0,0,275,276,5,116,0,0,276,277,5,121,0,0,277,64,1,0,0,0,278,279,5,
		76,0,0,279,280,5,105,0,0,280,281,5,115,0,0,281,282,5,116,0,0,282,283,5,
		58,0,0,283,284,5,58,0,0,284,285,5,116,0,0,285,286,5,97,0,0,286,287,5,105,
		0,0,287,288,5,108,0,0,288,66,1,0,0,0,289,290,5,78,0,0,290,291,5,97,0,0,
		291,292,5,116,0,0,292,293,5,58,0,0,293,294,5,58,0,0,294,295,5,112,0,0,
		295,296,5,114,0,0,296,297,5,101,0,0,297,298,5,100,0,0,298,68,1,0,0,0,299,
		300,5,78,0,0,300,301,5,97,0,0,301,302,5,116,0,0,302,303,5,58,0,0,303,304,
		5,58,0,0,304,305,5,105,0,0,305,306,5,115,0,0,306,307,5,122,0,0,307,308,
		5,101,0,0,308,309,5,114,0,0,309,310,5,111,0,0,310,70,1,0,0,0,311,312,5,
		78,0,0,312,313,5,97,0,0,313,314,5,116,0,0,314,315,5,58,0,0,315,316,5,58,
		0,0,316,317,5,114,0,0,317,318,5,101,0,0,318,319,5,99,0,0,319,72,1,0,0,
		0,320,321,5,66,0,0,321,322,5,111,0,0,322,323,5,111,0,0,323,324,5,108,0,
		0,324,74,1,0,0,0,325,326,5,78,0,0,326,327,5,97,0,0,327,328,5,116,0,0,328,
		76,1,0,0,0,329,330,5,85,0,0,330,331,5,110,0,0,331,332,5,105,0,0,332,333,
		5,116,0,0,333,78,1,0,0,0,334,335,5,97,0,0,335,336,5,110,0,0,336,337,5,
		100,0,0,337,80,1,0,0,0,338,339,5,97,0,0,339,340,5,115,0,0,340,82,1,0,0,
		0,341,342,5,99,0,0,342,343,5,111,0,0,343,344,5,110,0,0,344,345,5,115,0,
		0,345,84,1,0,0,0,346,347,5,99,0,0,347,348,5,111,0,0,348,349,5,114,0,0,
		349,350,5,101,0,0,350,86,1,0,0,0,351,352,5,101,0,0,352,353,5,108,0,0,353,
		354,5,115,0,0,354,355,5,101,0,0,355,88,1,0,0,0,356,357,5,101,0,0,357,358,
		5,120,0,0,358,359,5,116,0,0,359,360,5,101,0,0,360,361,5,110,0,0,361,362,
		5,100,0,0,362,90,1,0,0,0,363,364,5,102,0,0,364,365,5,97,0,0,365,366,5,
		108,0,0,366,367,5,115,0,0,367,368,5,101,0,0,368,92,1,0,0,0,369,370,5,102,
		0,0,370,371,5,105,0,0,371,372,5,120,0,0,372,94,1,0,0,0,373,374,5,102,0,
		0,374,375,5,110,0,0,375,96,1,0,0,0,376,377,5,102,0,0,377,378,5,111,0,0,
		378,379,5,108,0,0,379,380,5,100,0,0,380,98,1,0,0,0,381,382,5,105,0,0,382,
		383,5,102,0,0,383,100,1,0,0,0,384,385,5,105,0,0,385,386,5,110,0,0,386,
		102,1,0,0,0,387,388,5,105,0,0,388,389,5,110,0,0,389,390,5,108,0,0,390,
		104,1,0,0,0,391,392,5,105,0,0,392,393,5,110,0,0,393,394,5,108,0,0,394,
		395,5,105,0,0,395,396,5,110,0,0,396,397,5,101,0,0,397,106,1,0,0,0,398,
		399,5,105,0,0,399,400,5,110,0,0,400,401,5,114,0,0,401,108,1,0,0,0,402,
		403,5,108,0,0,403,404,5,97,0,0,404,405,5,110,0,0,405,406,5,103,0,0,406,
		407,5,117,0,0,407,408,5,97,0,0,408,409,5,103,0,0,409,410,5,101,0,0,410,
		110,1,0,0,0,411,412,5,108,0,0,412,413,5,101,0,0,413,414,5,116,0,0,414,
		112,1,0,0,0,415,416,5,108,0,0,416,417,5,101,0,0,417,418,5,116,0,0,418,
		419,5,114,0,0,419,420,5,101,0,0,420,421,5,99,0,0,421,114,1,0,0,0,422,423,
		5,109,0,0,423,424,5,97,0,0,424,425,5,116,0,0,425,426,5,99,0,0,426,427,
		5,104,0,0,427,116,1,0,0,0,428,429,5,110,0,0,429,430,5,111,0,0,430,431,
		5,116,0,0,431,118,1,0,0,0,432,433,5,111,0,0,433,434,5,114,0,0,434,120,
		1,0,0,0,435,436,5,114,0,0,436,437,5,101,0,0,437,438,5,116,0,0,438,439,
		5,117,0,0,439,440,5,114,0,0,440,441,5,110,0,0,441,122,1,0,0,0,442,443,
		5,115,0,0,443,444,5,117,0,0,444,445,5,99,0,0,445,446,5,99,0,0,446,124,
		1,0,0,0,447,448,5,116,0,0,448,449,5,104,0,0,449,450,5,101,0,0,450,451,
		5,110,0,0,451,126,1,0,0,0,452,453,5,116,0,0,453,454,5,104,0,0,454,455,
		5,114,0,0,455,456,5,111,0,0,456,457,5,119,0,0,457,458,5,115,0,0,458,128,
		1,0,0,0,459,460,5,116,0,0,460,461,5,114,0,0,461,462,5,117,0,0,462,463,
		5,101,0,0,463,130,1,0,0,0,464,465,5,116,0,0,465,466,5,121,0,0,466,467,
		5,112,0,0,467,468,5,101,0,0,468,132,1,0,0,0,469,470,5,117,0,0,470,471,
		5,110,0,0,471,472,5,102,0,0,472,473,5,111,0,0,473,474,5,108,0,0,474,475,
		5,100,0,0,475,134,1,0,0,0,476,477,5,117,0,0,477,478,5,110,0,0,478,479,
		5,105,0,0,479,480,5,116,0,0,480,136,1,0,0,0,481,482,5,119,0,0,482,483,
		5,105,0,0,483,484,5,116,0,0,484,485,5,104,0,0,485,138,1,0,0,0,486,487,
		5,181,0,0,487,140,1,0,0,0,488,489,5,101,0,0,489,490,5,120,0,0,490,491,
		5,99,0,0,491,492,5,101,0,0,492,493,5,112,0,0,493,494,5,116,0,0,494,495,
		5,105,0,0,495,496,5,111,0,0,496,497,5,110,0,0,497,142,1,0,0,0,498,499,
		5,118,0,0,499,500,5,97,0,0,500,501,5,114,0,0,501,502,5,105,0,0,502,503,
		5,97,0,0,503,504,5,110,0,0,504,505,5,116,0,0,505,144,1,0,0,0,506,507,5,
		99,0,0,507,508,5,97,0,0,508,509,5,115,0,0,509,510,5,116,0,0,510,146,1,
		0,0,0,511,512,5,58,0,0,512,513,5,61,0,0,513,148,1,0,0,0,514,515,5,38,0,
		0,515,150,1,0,0,0,516,517,5,110,0,0,517,518,5,101,0,0,518,519,5,119,0,
		0,519,152,1,0,0,0,520,521,5,112,0,0,521,522,5,97,0,0,522,523,5,110,0,0,
		523,524,5,105,0,0,524,525,5,99,0,0,525,526,5,33,0,0,526,154,1,0,0,0,527,
		528,5,116,0,0,528,529,5,104,0,0,529,530,5,114,0,0,530,531,5,111,0,0,531,
		532,5,119,0,0,532,156,1,0,0,0,533,534,5,116,0,0,534,535,5,114,0,0,535,
		536,5,121,0,0,536,158,1,0,0,0,537,538,5,99,0,0,538,539,5,97,0,0,539,540,
		5,116,0,0,540,541,5,99,0,0,541,542,5,104,0,0,542,160,1,0,0,0,543,544,5,
		84,0,0,544,545,5,111,0,0,545,546,5,112,0,0,546,162,1,0,0,0,547,548,5,66,
		0,0,548,549,5,111,0,0,549,550,5,116,0,0,550,164,1,0,0,0,551,552,5,47,0,
		0,552,553,5,47,0,0,553,557,1,0,0,0,554,556,8,3,0,0,555,554,1,0,0,0,556,
		559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,565,1,0,0,0,559,557,1,
		0,0,0,560,562,5,13,0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,
		563,566,5,10,0,0,564,566,5,0,0,1,565,561,1,0,0,0,565,564,1,0,0,0,566,567,
		1,0,0,0,567,568,6,82,0,0,568,166,1,0,0,0,569,570,5,47,0,0,570,571,5,42,
		0,0,571,575,1,0,0,0,572,574,9,0,0,0,573,572,1,0,0,0,574,577,1,0,0,0,575,
		576,1,0,0,0,575,573,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,5,
		42,0,0,579,580,5,47,0,0,580,581,1,0,0,0,581,582,6,83,0,0,582,168,1,0,0,
		0,583,586,5,95,0,0,584,586,3,1,0,0,585,583,1,0,0,0,585,584,1,0,0,0,586,
		594,1,0,0,0,587,593,7,4,0,0,588,591,3,7,3,0,589,591,3,1,0,0,590,588,1,
		0,0,0,590,589,1,0,0,0,591,593,1,0,0,0,592,587,1,0,0,0,592,590,1,0,0,0,
		593,596,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,170,1,0,0,0,596,594,
		1,0,0,0,597,603,5,35,0,0,598,604,7,5,0,0,599,602,3,7,3,0,600,602,3,1,0,
		0,601,599,1,0,0,0,601,600,1,0,0,0,602,604,1,0,0,0,603,598,1,0,0,0,603,
		601,1,0,0,0,604,605,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,172,1,
		0,0,0,607,608,5,60,0,0,608,609,5,48,0,0,609,610,5,120,0,0,610,613,1,0,
		0,0,611,614,3,7,3,0,612,614,7,6,0,0,613,611,1,0,0,0,613,612,1,0,0,0,614,
		615,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,618,5,
		62,0,0,618,174,1,0,0,0,619,621,3,7,3,0,620,619,1,0,0,0,621,622,1,0,0,0,
		622,620,1,0,0,0,622,623,1,0,0,0,623,176,1,0,0,0,624,626,7,7,0,0,625,624,
		1,0,0,0,626,627,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,
		0,629,630,6,88,0,0,630,178,1,0,0,0,631,632,7,8,0,0,632,180,1,0,0,0,633,
		634,9,0,0,0,634,182,1,0,0,0,17,0,185,557,561,565,575,585,590,592,594,601,
		603,605,613,615,622,627,1,6,0,0
	]

	public
	static let _ATN: ATN = try! ATNDeserializer().deserialize(_serializedATN)
}